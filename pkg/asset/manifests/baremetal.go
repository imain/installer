package manifests

import (
	"fmt"
	"path/filepath"

	"github.com/ghodss/yaml"
	"github.com/pkg/errors"

	operatorv1 "github.com/openshift/api/operator/v1"
	"github.com/openshift/installer/pkg/asset"
	"github.com/openshift/installer/pkg/asset/installconfig"
	"github.com/openshift/installer/pkg/asset/templates/content/openshift"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

var (
	baremetalCrdFilename = filepath.Join(manifestDir, "baremetal-deployment-01-crd.yml")
	baremetalCfgFilename = filepath.Join(manifestDir, "baremetal-deployment-02-config.yml")
)

// We need to manually create our CRDs first, so we can create the
// configuration instance of it in the installer.

// Baremetal generates the baremetal-deployment-*.yml files.
type Baremetal struct {
	Config   *operatorv1.Metal3Provisioning
	FileList []*asset.File
}

var _ asset.WritableAsset = (*Baremetal)(nil)

// Name returns a human friendly name for the operator.
func (bmo *Baremetal) Name() string {
	return "Baremetal Deployment Config"
}

// Dependencies returns all of the dependencies directly needed to generate
// baremetal configuration.
func (bmo *Baremetal) Dependencies() []asset.Asset {
	return []asset.Asset{
		&installconfig.InstallConfig{},
		&openshift.BaremetalCRDs{},
	}
}

// Generate generates the baremetal operator config and its CRD.
func (bmo *Baremetal) Generate(dependencies asset.Parents) error {
	installConfig := &installconfig.InstallConfig{}
	crds := &openshift.BaremetalCRDs{}
	dependencies.Get(installConfig, crds)

	baremetalConfig := installConfig.Config.Platform.BareMetal

	config := &operatorv1.Metal3Provisioning{
		TypeMeta: metav1.TypeMeta{
			APIVersion: operatorv1.SchemeGroupVersion.String(),
			Kind:       "Baremetal",
		},
		ObjectMeta: metav1.ObjectMeta{
			Name: "cluster",
			// not namespaced
		},
		Spec: operatorv1.Metal3ProvisioningSpec{
			ProvisioningInterface:   baremetalConfig.ProvisioningInterface,
			ProvisioningIP:          baremetalConfig.ClusterProvisioningIP,
			ProvisioningNetworkCIDR: baremetalConfig.ProvisioningNetworkCIDR,
			ProvisioningDHCP: operatorv1.ProvisioningDHCP{
				DHCPRange: baremetalConfig.ProvisioningDHCPRange,
			},
		},
	}
	// Can't initialize this in the struct literal above as it's embedded.
	config.Spec.ProvisioningDHCP.ManagementState = baremetalConfig.ProvisioningDHCPManagementState

	configData, err := yaml.Marshal(config)
	if err != nil {
		return errors.Wrapf(err, "failed to create %s manifests from InstallConfig", bmo.Name())
	}

	crdContents := ""
	for _, crdFile := range crds.Files() {
		crdContents = fmt.Sprintf("%s\n---\n%s", crdContents, crdFile.Data)
	}

	bmo.FileList = []*asset.File{
		{
			Filename: baremetalCrdFilename,
			Data:     []byte(crdContents),
		},
		{
			Filename: baremetalCfgFilename,
			Data:     configData,
		},
	}

	return nil
}

// Files returns the files generated by the asset.
func (bmo *Baremetal) Files() []*asset.File {
	return bmo.FileList
}

// Load returns false since this asset is not written to disk by the installer.
func (bmo *Baremetal) Load(f asset.FileFetcher) (bool, error) {
	return false, nil
}
